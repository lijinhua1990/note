#title 创建型模式－Abstract Factory(抽象工厂)

１、意图

提供一个创建了毓相关或相互依赖对象的接口，而无需指定它们具体的类。

２、别名

Kit

３、动机

考虑支持多种视感标准的用户界面工具包，为了实现它，可以定义一个抽象的WidgetFactory类，它声明了用来创建每一类基本窗口组件的窗口，每一类窗口组件都有一个抽象类，而具体子类则实现窗口组件的特定视感风格。客户调用这些操作获得窗口组件实例，但客户并不知道他们使用的是哪些具体类，这样客户就不依赖于一般的视感风格。

４、适用性

以下情况可以使用Abstract Factory模式：

一个系统要独立于它的产品的创建、组合和表示时。

一个系统要由多个产品系统中的一个来配置时。

当你要强调一系统相关的产品对象的设计以便进行联合使用时。

当你提供一个产品类库，而只想显示它们的接口而不是实现时。

５、结构

６、参与者

AbstractFactory－声明一个创建抽象产品对象的操作接口

ConcreteFactory－实现创建具体产品对象的操作

AbstractProduct－为一类产品对象声明一个接口

ConcreteProduct－定义一个将被相应的具体工厂创建的产品对象，实现AbstractProduct接口

Client－仅使用由AbstractFactory和AbstractProduct类声明的接口。

７、协作

通常在运行时刻创建一个ConcreteFactory类的实现，为创建不同的产品对象，客户应使用不同的具体工厂。

AbstractFactory将产品对象的创建延迟到它的ConcreteFactory子类。

８、效果

１）它分离了具体的类

２）它使得易于交换产品系列

３）它有利于产品的一致性

４）难以支持新种类的产品

９、实现

将工厂作为单件：一个应用中一般每个产品系列只需一个ConcreteFactory实例，因此工厂最好实现为一个Singleton。

创建产品：

定义可扩展的工厂：

１０、代码示例

１１、已知应用

１２、相关模式

Factory Method, Prototype, Singleton。
